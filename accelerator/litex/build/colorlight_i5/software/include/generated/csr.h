//--------------------------------------------------------------------------------
// Auto-generated by LiteX (f988d9f2c) on 2025-10-09 18:15:44
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// CSR Includes.
//--------------------------------------------------------------------------------

#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0x82000000L
#endif /* ! CSR_BASE */

//--------------------------------------------------------------------------------
// CSR Registers/Fields Definition.
//--------------------------------------------------------------------------------

/* ACCELERATOR Registers */
#define CSR_ACCELERATOR_BASE (CSR_BASE + 0x0L)
#define CSR_ACCELERATOR_CONTROL_ADDR (CSR_BASE + 0x0L)
#define CSR_ACCELERATOR_CONTROL_SIZE 1
#define CSR_ACCELERATOR_A0_ADDR (CSR_BASE + 0x4L)
#define CSR_ACCELERATOR_A0_SIZE 1
#define CSR_ACCELERATOR_A1_ADDR (CSR_BASE + 0x8L)
#define CSR_ACCELERATOR_A1_SIZE 1
#define CSR_ACCELERATOR_A2_ADDR (CSR_BASE + 0xcL)
#define CSR_ACCELERATOR_A2_SIZE 1
#define CSR_ACCELERATOR_A3_ADDR (CSR_BASE + 0x10L)
#define CSR_ACCELERATOR_A3_SIZE 1
#define CSR_ACCELERATOR_A4_ADDR (CSR_BASE + 0x14L)
#define CSR_ACCELERATOR_A4_SIZE 1
#define CSR_ACCELERATOR_A5_ADDR (CSR_BASE + 0x18L)
#define CSR_ACCELERATOR_A5_SIZE 1
#define CSR_ACCELERATOR_A6_ADDR (CSR_BASE + 0x1cL)
#define CSR_ACCELERATOR_A6_SIZE 1
#define CSR_ACCELERATOR_A7_ADDR (CSR_BASE + 0x20L)
#define CSR_ACCELERATOR_A7_SIZE 1
#define CSR_ACCELERATOR_B0_ADDR (CSR_BASE + 0x24L)
#define CSR_ACCELERATOR_B0_SIZE 1
#define CSR_ACCELERATOR_B1_ADDR (CSR_BASE + 0x28L)
#define CSR_ACCELERATOR_B1_SIZE 1
#define CSR_ACCELERATOR_B2_ADDR (CSR_BASE + 0x2cL)
#define CSR_ACCELERATOR_B2_SIZE 1
#define CSR_ACCELERATOR_B3_ADDR (CSR_BASE + 0x30L)
#define CSR_ACCELERATOR_B3_SIZE 1
#define CSR_ACCELERATOR_B4_ADDR (CSR_BASE + 0x34L)
#define CSR_ACCELERATOR_B4_SIZE 1
#define CSR_ACCELERATOR_B5_ADDR (CSR_BASE + 0x38L)
#define CSR_ACCELERATOR_B5_SIZE 1
#define CSR_ACCELERATOR_B6_ADDR (CSR_BASE + 0x3cL)
#define CSR_ACCELERATOR_B6_SIZE 1
#define CSR_ACCELERATOR_B7_ADDR (CSR_BASE + 0x40L)
#define CSR_ACCELERATOR_B7_SIZE 1
#define CSR_ACCELERATOR_DONE_ADDR (CSR_BASE + 0x44L)
#define CSR_ACCELERATOR_DONE_SIZE 1
#define CSR_ACCELERATOR_RESULT_HI_ADDR (CSR_BASE + 0x48L)
#define CSR_ACCELERATOR_RESULT_HI_SIZE 1
#define CSR_ACCELERATOR_RESULT_LO_ADDR (CSR_BASE + 0x4cL)
#define CSR_ACCELERATOR_RESULT_LO_SIZE 1

/* ACCELERATOR Fields */
#define CSR_ACCELERATOR_CONTROL_RUN_OFFSET 0
#define CSR_ACCELERATOR_CONTROL_RUN_SIZE 1

/* CTRL Registers */
#define CSR_CTRL_BASE (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_SIZE 1
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x804L)
#define CSR_CTRL_SCRATCH_SIZE 1
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x808L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1

/* CTRL Fields */
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1

/* IDENTIFIER_MEM Registers */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x1000L)

/* IDENTIFIER_MEM Fields */

/* LEDS Registers */
#define CSR_LEDS_BASE (CSR_BASE + 0x1800L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x1800L)
#define CSR_LEDS_OUT_SIZE 1

/* LEDS Fields */

/* SDRAM Registers */
#define CSR_SDRAM_BASE (CSR_BASE + 0x2000L)
#define CSR_SDRAM_DFII_CONTROL_ADDR (CSR_BASE + 0x2000L)
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR (CSR_BASE + 0x2004L)
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR (CSR_BASE + 0x2008L)
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR (CSR_BASE + 0x200cL)
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR (CSR_BASE + 0x2010L)
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR (CSR_BASE + 0x2014L)
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 1
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR (CSR_BASE + 0x2018L)
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 1

/* SDRAM Fields */
#define CSR_SDRAM_DFII_CONTROL_SEL_OFFSET 0
#define CSR_SDRAM_DFII_CONTROL_SEL_SIZE 1
#define CSR_SDRAM_DFII_CONTROL_CKE_OFFSET 1
#define CSR_SDRAM_DFII_CONTROL_CKE_SIZE 1
#define CSR_SDRAM_DFII_CONTROL_ODT_OFFSET 2
#define CSR_SDRAM_DFII_CONTROL_ODT_SIZE 1
#define CSR_SDRAM_DFII_CONTROL_RESET_N_OFFSET 3
#define CSR_SDRAM_DFII_CONTROL_RESET_N_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_TOP_OFFSET 6
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_TOP_SIZE 1
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_BOTTOM_OFFSET 7
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_BOTTOM_SIZE 1

/* SPIFLASH Registers */
#define CSR_SPIFLASH_BASE (CSR_BASE + 0x2800L)
#define CSR_SPIFLASH_PHY_CLK_DIVISOR_ADDR (CSR_BASE + 0x2800L)
#define CSR_SPIFLASH_PHY_CLK_DIVISOR_SIZE 1
#define CSR_SPIFLASH_MMAP_DUMMY_BITS_ADDR (CSR_BASE + 0x2804L)
#define CSR_SPIFLASH_MMAP_DUMMY_BITS_SIZE 1
#define CSR_SPIFLASH_MASTER_CS_ADDR (CSR_BASE + 0x2808L)
#define CSR_SPIFLASH_MASTER_CS_SIZE 1
#define CSR_SPIFLASH_MASTER_PHYCONFIG_ADDR (CSR_BASE + 0x280cL)
#define CSR_SPIFLASH_MASTER_PHYCONFIG_SIZE 1
#define CSR_SPIFLASH_MASTER_RXTX_ADDR (CSR_BASE + 0x2810L)
#define CSR_SPIFLASH_MASTER_RXTX_SIZE 1
#define CSR_SPIFLASH_MASTER_STATUS_ADDR (CSR_BASE + 0x2814L)
#define CSR_SPIFLASH_MASTER_STATUS_SIZE 1

/* SPIFLASH Fields */
#define CSR_SPIFLASH_MASTER_PHYCONFIG_LEN_OFFSET 0
#define CSR_SPIFLASH_MASTER_PHYCONFIG_LEN_SIZE 8
#define CSR_SPIFLASH_MASTER_PHYCONFIG_WIDTH_OFFSET 8
#define CSR_SPIFLASH_MASTER_PHYCONFIG_WIDTH_SIZE 4
#define CSR_SPIFLASH_MASTER_PHYCONFIG_MASK_OFFSET 16
#define CSR_SPIFLASH_MASTER_PHYCONFIG_MASK_SIZE 8
#define CSR_SPIFLASH_MASTER_STATUS_TX_READY_OFFSET 0
#define CSR_SPIFLASH_MASTER_STATUS_TX_READY_SIZE 1
#define CSR_SPIFLASH_MASTER_STATUS_RX_READY_OFFSET 1
#define CSR_SPIFLASH_MASTER_STATUS_RX_READY_SIZE 1

/* TIMER0 Registers */
#define CSR_TIMER0_BASE (CSR_BASE + 0x3000L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x3000L)
#define CSR_TIMER0_LOAD_SIZE 1
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x3004L)
#define CSR_TIMER0_RELOAD_SIZE 1
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x3008L)
#define CSR_TIMER0_EN_SIZE 1
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x300cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x3010L)
#define CSR_TIMER0_VALUE_SIZE 1
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x3014L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x3018L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x301cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1

/* TIMER0 Fields */
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1

/* UART Registers */
#define CSR_UART_BASE (CSR_BASE + 0x3800L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x3800L)
#define CSR_UART_RXTX_SIZE 1
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x3804L)
#define CSR_UART_TXFULL_SIZE 1
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x3808L)
#define CSR_UART_RXEMPTY_SIZE 1
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x380cL)
#define CSR_UART_EV_STATUS_SIZE 1
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x3810L)
#define CSR_UART_EV_PENDING_SIZE 1
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x3814L)
#define CSR_UART_EV_ENABLE_SIZE 1
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x3818L)
#define CSR_UART_TXEMPTY_SIZE 1
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x381cL)
#define CSR_UART_RXFULL_SIZE 1

/* UART Fields */
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1

//--------------------------------------------------------------------------------
// CSR Registers Access Functions.
//--------------------------------------------------------------------------------

#ifndef LITEX_CSR_ACCESS_FUNCTIONS
#define LITEX_CSR_ACCESS_FUNCTIONS 1
#endif

#if LITEX_CSR_ACCESS_FUNCTIONS

/* ACCELERATOR Access Functions */
static inline uint32_t accelerator_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void accelerator_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
static inline uint32_t accelerator_a0_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void accelerator_a0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
static inline uint32_t accelerator_a1_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}
static inline void accelerator_a1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8L));
}
static inline uint32_t accelerator_a2_read(void) {
	return csr_read_simple((CSR_BASE + 0xcL));
}
static inline void accelerator_a2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xcL));
}
static inline uint32_t accelerator_a3_read(void) {
	return csr_read_simple((CSR_BASE + 0x10L));
}
static inline void accelerator_a3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x10L));
}
static inline uint32_t accelerator_a4_read(void) {
	return csr_read_simple((CSR_BASE + 0x14L));
}
static inline void accelerator_a4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x14L));
}
static inline uint32_t accelerator_a5_read(void) {
	return csr_read_simple((CSR_BASE + 0x18L));
}
static inline void accelerator_a5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x18L));
}
static inline uint32_t accelerator_a6_read(void) {
	return csr_read_simple((CSR_BASE + 0x1cL));
}
static inline void accelerator_a6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1cL));
}
static inline uint32_t accelerator_a7_read(void) {
	return csr_read_simple((CSR_BASE + 0x20L));
}
static inline void accelerator_a7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x20L));
}
static inline uint32_t accelerator_b0_read(void) {
	return csr_read_simple((CSR_BASE + 0x24L));
}
static inline void accelerator_b0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x24L));
}
static inline uint32_t accelerator_b1_read(void) {
	return csr_read_simple((CSR_BASE + 0x28L));
}
static inline void accelerator_b1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x28L));
}
static inline uint32_t accelerator_b2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2cL));
}
static inline void accelerator_b2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2cL));
}
static inline uint32_t accelerator_b3_read(void) {
	return csr_read_simple((CSR_BASE + 0x30L));
}
static inline void accelerator_b3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x30L));
}
static inline uint32_t accelerator_b4_read(void) {
	return csr_read_simple((CSR_BASE + 0x34L));
}
static inline void accelerator_b4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x34L));
}
static inline uint32_t accelerator_b5_read(void) {
	return csr_read_simple((CSR_BASE + 0x38L));
}
static inline void accelerator_b5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x38L));
}
static inline uint32_t accelerator_b6_read(void) {
	return csr_read_simple((CSR_BASE + 0x3cL));
}
static inline void accelerator_b6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3cL));
}
static inline uint32_t accelerator_b7_read(void) {
	return csr_read_simple((CSR_BASE + 0x40L));
}
static inline void accelerator_b7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x40L));
}
static inline uint32_t accelerator_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x44L));
}
static inline uint32_t accelerator_result_hi_read(void) {
	return csr_read_simple((CSR_BASE + 0x48L));
}
static inline uint32_t accelerator_result_lo_read(void) {
	return csr_read_simple((CSR_BASE + 0x4cL));
}

/* CTRL Access Functions */
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x804L));
}
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}

/* IDENTIFIER_MEM Access Functions */

/* LEDS Access Functions */
static inline uint32_t leds_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1800L));
}

/* SDRAM Access Functions */
static inline uint32_t sdram_dfii_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x2000L));
}
static inline void sdram_dfii_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2000L));
}
static inline uint32_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x2004L));
}
static inline void sdram_dfii_pi0_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2004L));
}
static inline uint32_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x2008L));
}
static inline void sdram_dfii_pi0_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2008L));
}
static inline uint32_t sdram_dfii_pi0_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x200cL));
}
static inline void sdram_dfii_pi0_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x200cL));
}
static inline uint32_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x2010L));
}
static inline void sdram_dfii_pi0_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2010L));
}
static inline uint32_t sdram_dfii_pi0_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2014L));
}
static inline void sdram_dfii_pi0_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2014L));
}
static inline uint32_t sdram_dfii_pi0_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2018L));
}

/* SPIFLASH Access Functions */
static inline uint32_t spiflash_phy_clk_divisor_read(void) {
	return csr_read_simple((CSR_BASE + 0x2800L));
}
static inline void spiflash_phy_clk_divisor_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2800L));
}
static inline uint32_t spiflash_mmap_dummy_bits_read(void) {
	return csr_read_simple((CSR_BASE + 0x2804L));
}
static inline void spiflash_mmap_dummy_bits_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2804L));
}
static inline uint32_t spiflash_master_cs_read(void) {
	return csr_read_simple((CSR_BASE + 0x2808L));
}
static inline void spiflash_master_cs_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2808L));
}
static inline uint32_t spiflash_master_phyconfig_read(void) {
	return csr_read_simple((CSR_BASE + 0x280cL));
}
static inline void spiflash_master_phyconfig_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x280cL));
}
static inline uint32_t spiflash_master_rxtx_read(void) {
	return csr_read_simple((CSR_BASE + 0x2810L));
}
static inline void spiflash_master_rxtx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2810L));
}
static inline uint32_t spiflash_master_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x2814L));
}

/* TIMER0 Access Functions */
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3000L));
}
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple((CSR_BASE + 0x3004L));
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3004L));
}
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x3008L));
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3008L));
}
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x300cL));
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x300cL));
}
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x3010L));
}
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x3014L));
}
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x3018L));
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3018L));
}
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x301cL));
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x301cL));
}

/* UART Access Functions */
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple((CSR_BASE + 0x3800L));
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3800L));
}
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x3804L));
}
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x3808L));
}
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x380cL));
}
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x3810L));
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3810L));
}
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x3814L));
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3814L));
}
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x3818L));
}
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x381cL));
}
#endif /* LITEX_CSR_ACCESS_FUNCTIONS */

#endif /* ! __GENERATED_CSR_H */
